登陆操作：
git --config user.name "YangWenXuan"
git --config user.email "282090664@qq.com"

初始化操作：
git init     初始化一个本地文件夹为 git 仓库.
git status 查看本地仓库装填信息
git add 文件名      添加一个新的文件到本地仓库
git add .   ----添加整个文件夹下所有的文件到暂存区
git commit -m "提交提示"  提交修改内容到本地仓库


连接git服务器的操作:
git remote add origin [git@github.com:YangWenXuan/GameFramework01.git]     ----链接远端仓库
git push origin master 将确认内容push到远端


连接后的操作:
git chechout master ----切换分支到主分支
git branch FirstBranch ---- 创建新的分支


提交和拉取的操作：
情况①：不想Commit自己的修改和新添加的文件，只想从remote端拉取最新的版本
只使用一个命令：git checkout .


当你想从远端获取最新版本并合并的时候：
git remote -v 查看远程仓库
git fetch origin master:temp : 从远程origin仓库的master下载到本地master并新建一个temp分支
git pull origin master 从远程拉取最新版本到本地并且会自动合并
git fetch origin master 从远程拉取最新版本到本地，但是不会合并
git pull origin master


分支操作相关：
git branch -r  :  查看远端库的分支状况
git branch  查看本地分支状况     ---星号（*）代表当前所在分支
git chechout -b dev  :  从已有的分支创建新的分支(本地操作--只在本地创建了一个分支)（如从master分支）创建一个dev分支.
git branch -a :查看所有分支



提交新分支的改动到主分支上：
①先切回主分支：git chechout master
②提交改动到主分支：git merge dev
③ git diff 查看冲突
④ git push origin remote 提交到远端



关于git的暂存功能：
关键词：想pull 但不想commit
① git stash 可用来暂存当前正在进行的工作， 比如想pull 最新代码， 又不想加新commit， 或者另外一种情况，为了fix 一个紧急的bug,  先stash, 使返回到自己上一个commit, 改完bug之后再stash pop, 继续原来的工作;
备份当前工作区的内容，保存到git 栈中，从最近的一次commit中读取相关内容
②git stash 与 git stash pop 一对命令：
 git stash poop:从git栈中获取到最近一次stash进去的内容，恢复工作区的内容。。获取之后，会删除栈中对应的stash.
③git stash list 显示git栈中所有工作区内容的备份
④git stash clear 清空git栈.


git项目迁移：
①在将被转移的项目的目录下使用下面的命令，将本地项目文件资源直接推送到新的地址的远端（镜像推送）
git push --mirror 新的git地址 
栗子：git push --mirror git@192.168.10.200:WordFood_Client.git




使用注意点：
①在与GitHub远端连接的时候，如果配置了SSHKey，则不用再登陆；直接新建本地文件夹--初始化--查看状态--gitClone将想要建立连接的远端Clone的操作就相当于建立连接了

处理 git deleted状态
一种是 git rm --cached "文件路径"，不删除物理文件，仅将该文件从缓存中删除；
一种是 git rm --f "文件路径"，不仅将该文件从缓存中删除，还会将物理文件删除（不会回收到垃圾桶）
然后再推送到仓库


git文件名太长无法处理的问题：
①git config --system core.longpaths true