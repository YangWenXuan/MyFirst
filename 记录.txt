《系统分析与设计》
《软件体系结构与设计》
《算法》
《大话数据结构》


1.git 中的ssh key 有什么作用？
加密传输 

众所周知ssh是加密传输。

加密传输的算法有好多，git可使用rsa，rsa要解决的一个核心问题是，如何使用一对特定的数字，使其中一个数字可以用来加密，而另外一个数字可以用来解密。这两个数字就是你在使用git和github的时候所遇到的public key也就是公钥以及private key私钥。

其中，公钥就是那个用来加密的数字，这也就是为什么你在本机生成了公钥之后，要上传到github的原因。从github发回来的，用那公钥加密过的数据，可以用你本地的私钥来还原。

如果你的key丢失了，不管是公钥还是私钥，丢失一个都不能用了，解决方法也很简单，重新再生成一次，然后在github.com里再设置一次就行
2.Git与SVN的区别：
 1 核心点：Git是分布式的，而SVN不是分布式的
 2 Git有Local Repository 被你的代码库，不用服务端也可以Commit
3.什么是C#的序列化
1.C#中[Serialized]和[NonSerialized]是用来干嘛的？
 0 [Serialized] 用来标定一个类可以被序列化；
 1 反之[NonSerialized]用来标定一个类不能被序列化；
 2 可以被序列化是什么意思？
    就是指一个类可以的对象可以被转换成容易传输的格式的过程，这里的容易传输的格式具体指的是：二进制流，流文件（一组连续的一维数据包含开头和结尾）
4.C# 委托与事件的详细解析
2.C#中的委托（委托类型的使用方法（方式，写法））
 1)定义委托类型 public delegate int Call(int numl,int num2);
 2)声明委托对象 Call objCall
 3)创建委托对象，将方法与委托关联起来
 objCall=new Call(这里面是一个方法) 
 4)向委托增加关联的方法或者减少关联的方法（+=/-=）
2.1)C#内置的委托类型有哪些？
Func<> 和 Action<>
区别：
Func<T1，T2,TResult>是有返回值的委托
Action<T1,T2,T3>是没有返回值的委托.

3.C#中的事件
需要在委托的基础之上去定义和使用，可以将其理解为：事件是委托的封装，将委托封装成属性之后就是事件,其用法和委托如出一辙.

5.为什么要用委托与事件？
 0 在一些等待的过程当中，某个对象需要一直监听某个消息的时候使用（例如：大王A设下一个鸿门宴，命令B,C两队人马埋伏在屏风的后面。若大王左手举杯，则B队人马杀出来；若大王右手举杯，则C队人马杀出来；若大王摔杯，则BC两队人马同时杀将出来。乍一看这个可以使用if语句来判断，之后等待条件成立即可；问题是如此一来B，C需要时刻盯着大王的手去看，if判断也需要不停的去执行，这显然是不合理的；如何解决这个问题就是为什么要使用委托的答案）
 1 委托 ，它代表的必定是某一个方法，可以理解为将一个方法给委托出去，而被委托出去的方法必定有与之关联的其他方法，一般在其他的类里面.

5.Unity中的DontDestroyOnLoad()所带的缺陷是什么？
6.GitExtensions创建分支的实质是什么？
7.GitExtensions stage的实质是什么？
8.Unity Camera里面各种选项所对应的意思和实质是什么？
9.C# where 泛型类型约束--GoogleC#相关
10.虚方法和抽象类的区别是什么？
7)C# 虚方法的使用
①可以使用基类调用派生类的方法--使用基类对象.方法名调用的是派生类的实现
②满足条件：基类使用virtual标注，派生类使用override标注覆盖，访问修饰符相同.
③多重派生情况下：使用基类.方法名：调用的是最高级别派生类的方法实现.
7.1)为什么要使用虚方法?
答：虚方法是在继承的前提下，多态的一种表现形式。不同的对象调用同一个方法，就会有不同的表现行为.
11.C#静态家族---- 静态变量，属性，方法的作用以及为什么要使用静态变量
12.Unity中异步加载场景和同步加载场景的区别？几种场景加载方式的区别是什么？已知的常用的场景加载方式是什么？场景加载进度的获取方式是什么？场景加载状态的获取方式是什么？
13.C# 中的this
14.单例模式的实质？已有单例写法为什么会成为单例？单例的优缺点？
15.UGUI 给按钮绑定点击事件的4种方法
16.Get Set 方法深入理解--博客
17.Windows软连接是个啥？
18.Stack.Pop() 与Stack.Peek()的区别
19.C# 中的Var和Dynamic
20.找时间测一下Unity中Time类的详细意义.
21.param关键字
22.C# out 关键字的用法：
通常一个方法只能返回一个值，但是如果在某些时候，我们想要返回多个值，例如某个方法将一个浮点数分割成一个整数和一个小数返回去。这个时候我们就要用到out关键字。
23.C#中的readonly:
readonly 关键字是可以在字段上使用的修饰符。当字段声明包括 readonly 修饰符时，该声明引入的字段赋值只能作为声明的一部分出现，或者出现在同一类的构造函数中.
-->readonly 与const之间的区别
24.C#里面的反射机制是什么样子的？
25. int? firstX=points?.FirstOrDefault()?.X
对于运算符 ?. --如果运算符前面的对象为NULL，则不进行后面的获取成员的运算，直接返回NULL
26.语法糖的好处和坏处是什么？
27.C# Invoke和Unity Invoke的区别是什么？
28..NetCoreSDK是个啥？？
29.对象池的再理解
30.Stringf.Format相关
31.Unity编辑器扩展功能相关：
[ContextMenu("ReAssign")]---挂到游戏对象上，编辑状态下右边小齿轮的下拉菜单上会有这个东西
[CreateAssetMenu(menuName = "Atlas")]---Unity编辑器扩展可以总结整理出来
[ExecuteInEditMode]
[MenuItem("XPlugin/UI/Update/记录选择的UI引用", false, 1)]

31.UGUI Atlas 与NGUI Atlas之间的区别是什么？两个Atlas是为了解决什么问题而存在的？其工作原理是什么？


32.PlayerPrefsAES.SetString("lang", activeToggle.name);
PlayerPrefs.Set()的数据最终会被存储到哪里？？window里面？Android里面？其他？

33.#if.....Endif.....的作用是什么？？？

34.为什么DontDestroy的使用会导致反复生成一个GameObject？？？？

35.什么是StreamingAssets????干啥用的？为什么要用它？怎么用它？
36.请比较深入的了解异步机制的原理
37. HashSet为什么要使用HashSet？相比于LinkedList和ArrayList，HashSet的查找效率更高.(效率更高的原理是什么？)
38.Unity中的四大坐标系及其之间的转换，例子参考跳一跳，实现跳动的小球跟随鼠标的移动而移动.
targetPos = Camera.main.ScreenToWorldPoint(Input.mousePosition);
以上代码有效的前提是camera为正交模式
39. Unity移动物体的方法大全总结
跳动效果仿真 参考slime road 做出里面的小球跳动效果
40. ①Scoop gradle的研究与安装
②Cache Server
什么是Cache Server:本质上是一个服务器，是Unity提供的一个高速缓存服务器，用于存储导入到项目中的资源数据。分为Local 和 Remote 两种模式
41.C# Activator 这个东西是什么意思？
42.为什么要使用虚方法？为什么要使用抽象方法？两者之间有什么企区别？？
43.il2cpp的方式出包
①IL:Intermediate Language 中间语言.
②il2cpp:IL to cpp
③概念：IL2cpp是Unity字4.6版本之后提出的一种新的scripting backend（暂时理解为打包）方式
④作用：为Unity提供更加高效，更加便捷的虚拟机
⑤组成：AOT（静态编译器）+运行时库
⑥新的，那他与旧的方式的区别是什么
44.Unity Mono的作用？
45.啥是.net?
46.啥是Boo？
47.arm64 armv7 x86都是啥？
①Arm指的是手机处理器的指令集
②后缀64 v7 可以理解为其版本号
③arm64>armv7s>armv7>armv6 ---向下兼容：高版本指令集兼容低版本指令集
48.git 中amend Commit
49.Unity 中对不同类型图片的渲染顺序
overDraw，渲染顺序，透明图片渲染顺序，不透明图片渲染顺序，UI元素都是按照透明元素的方式去渲染的
37. 使用as关键字和第一种强制转换(在变量前加想要转换的类型)的区别就是，第一种如果转换失败会抛异常，第二种转换失败则返回一个null值。
50UGUI 拖拽那些事
51transform.TransformDirection() and transform.TransformPoint()
52Unity手机手势检测
53.协程中的坑，协程一定要手动停掉吗，常用的协程用法，协程有什么风险？
54.Application.persistentDataPath
Application.streamingAssetsPath   Application.dataPath
55.如何理解Canvas的三种Render Mode？
56.Sprite和Image的区别
57. Content Size Fitter
58.ArrayList:数组大小可以动态的扩充和收缩，因此声明Array List的时候不需要指定它的长度，容易出现类型不匹配的问题，存储或者检索值类型时通常会发生装箱和取消装箱的操作，性能影响较大
8.List：List声明集合时需要指定类型，避免了Array List类型不匹配的问题
9.Linked List：链式集合，解决了Array List和List删除元素后代价过大的问题，因为链表的每个节点存储着前后两个节点的索引信息，在删除元素后只需要处理相邻节点的索引就行，不用整体移动整个集合.

59.整块.
Vector3.Lerp()  与Vector3.Slerp() 之间的区别？
Quaternition.Lerp() 与 Quaternition.Slerp()之间的区别？
transform.TransformDirection()???
Rigidbody.Rotation 与transform.Rotation之间的区别？？
UnityEvent
Time类：Time.deltaTime
Mathf类：Mathf.epsilon 
RigidBody.moveMent() -- 使用插值的方法去移动一个刚体.

60.git rebase 变基的原理
61.场景中跟随UI一直出现的EventSystem是干什么用的？
62.同步，异步，线程，进程，怎莫用？为什么要用？为了解决什么问题？
63.Canvas Group的作用是什么？？
 
之间的区别

1.C#中[Serialized]和[NonSerialized]是用来干嘛的？
 0 [Serialized] 用来标定一个类可以被序列化；
 1 反之[NonSerialized]用来标定一个类不能被序列化；
 2 可以被序列化是什么意思？
    就是指一个类可以的对象可以被转换成容易传输的格式的过程，这里的容易传输的格式具体指的是：二进制流，流文件（一组连续的一维数据包含开头和结尾）

2.C#中的委托（委托类型的使用方法（方式，写法））
 1)定义委托类型 public delegate int Call(int numl,int num2);
 2)声明委托对象 Call objCall
 3)创建委托对象，将方法与委托关联起来
 objCall=new Call(这里面是一个方法) 
 4)向委托增加关联的方法或者减少关联的方法（+=/-=）
2.1)C#内置的委托类型有哪些？
Func<> 和 Action<>
区别：
Func<T1，T2,TResult>是有返回值的委托
Action<T1,T2,T3>是没有返回值的委托.

3.C#中的事件
需要在委托的基础之上去定义和使用，可以将其理解为：事件是委托的封装，将委托封装成属性之后就是事件,其用法和委托如出一辙.

4.C#中的委托与事件


5.为什么要用委托与事件？
 0 在一些等待的过程当中，某个对象需要一直监听某个消息的时候使用（例如：大王A设下一个鸿门宴，命令B,C两队人马埋伏在屏风的后面。若大王左手举杯，则B队人马杀出来；若大王右手举杯，则C队人马杀出来；若大王摔杯，则BC两队人马同时杀将出来。乍一看这个可以使用if语句来判断，之后等待条件成立即可；问题是如此一来B，C需要时刻盯着大王的手去看，if判断也需要不停的去执行，这显然是不合理的；如何解决这个问题就是为什么要使用委托的答案）
 1 委托 ，它代表的必定是某一个方法，可以理解为将一个方法给委托出去，而被委托出去的方法必定有与之关联的其他方法，一般在其他的类里面.

6.Unity中的DontDestroyOnLoad()所带的缺陷是什么？

7.将速盘的包给带过来
8.晚上回去在自己的电脑上装Git，测试分支的东西
9.关机一次，明天一大早复制一下VA的破解文件
10.谷歌浏览器登陆账号试试
面试过程中遇到的智力题目的重现


#strangeIoc的目的和作用--需要一套数据处理的思路和工具.
1 DoozyUI 与资源预制体的结合 资源更新需求.
3 Unity --动态划线的效果，单词游戏和接水游戏中的效果
6 改变脚本编译顺序 -- 使用框架进行管理
7 配置表研究
8 现有插件包功能--参考汇报整理
9 整理Dictionary List HasSet 的存储方法，看能不能写一个泛型的工具类
10 将第一次进游戏，，，每天，，，等需求做成一个工具类，收录进工具包代码里面
11 写一个方法，作为GM工具：清空注册表数据并重启游戏，模拟卸载操作
12 行为树AI
14 GM工具实现新思路
15 2D动画插件
16 Unity 动画系统 IK动画


=====================
1.现有工具的整理：
DoozyUI 
CineMachine 
Data Table
StrangeIOC


======================
模拟常见需求：
0 常见合成，合并
1 子弹类
2 2D骨骼节点动画
3 将填词，老虎机，土耳其方块，猫咪消除，粉碎机里面关于配置的东西整理出来
4 作品整理


泛型集合扩展方法的List.Take List.Skip
GitHub下载速度的问题解决
分模块整理总结，比如：
Unity ScrollRect使用中的各种情况
DoTween可以用来做的效果等
Unity ScrollRect   记忆功能
多相机，CullingMask,层级选择顺序
UI框架底层研究 -- 参数传递原理
EasySave整理成一个即拖即用的插件连带着自己扩展的方法
Unity LoadScene  和  LoadSceneAsync 的区别
Time.timeScale=0 之后 update 还会执行吗
总结整理击中常用的动画形式  比如钻石的飞入飞出 -- 周末
相机常用总结
读表的基本格式--整理到_Game里面
EasySave  基本 数据结构的简易使用模式构建
LinQ效率如何？？？
C# foreach 与 for 循环的区别  顺序等
大量字典集合的嵌套组合保存问题
区间判断的处理

Unity 设备发烫
动态合批  与 静态合批
内存碎片
数据范围不同精度

一起消方块软著




（2）内部的Object类型的影响
对于一般的引用类型来说，这部分的影响不是很大，但是对于值类型来说，往ArrayList里面添加和修改元素，都会引起装箱和拆箱的操作，频繁的操作可能会影响一部分效率。
但是恰恰对于大多数人，多数的应用都是使用值类型的数组。
消除这个影响是没有办法的，除非你不用它，否则就要承担一部分的效率损失，不过这部分的损失不会很大。


GetHashCode()???

3.小区间判断 大区间判断算法
4.阈值条件判断

1.Unity新特性
2.Unity性能优化
3.Unity基础巩固
4.Unity插件收集
5.Unity功能模块分类归纳总结 2D 3D 视频 剪辑 VR AR 等等

1.C#基础巩固
2.算法 数据结构
3.设计模式
4.网络 服务器 后端知识

1.UE4 UE5 C++
